import { NameType, AuthorityType, Authority, API, Struct, Name, WaitWeight, UInt32Type, UInt16Type, PublicKeyType, PermissionLevelType, Blob, ABI, Action, Checksum256Type, AssetType, UInt64Type, VarUIntType, Asset, UInt128Type, BytesType, Int64Type, UInt8Type, Checksum256, PublicKey, UInt16, UInt32, UInt8, TimePoint, UInt64, Int64, TimePointSec, Float64, BlockTimestamp, VarUInt, UInt128, Bytes, APIClient } from '@wharfkit/antelope';
import * as _wharfkit_contract from '@wharfkit/contract';
import { Contract as Contract$1, PartialBy, ContractArgs, ActionOptions } from '@wharfkit/contract';
import { Resources } from '@wharfkit/resources';
import { Token } from '@wharfkit/token';
import { ChainDefinition } from '@wharfkit/common';

interface PermissionData {
    account: NameType;
    parent: NameType;
    permission: NameType;
    auth: AuthorityType | Authority;
}
interface AddKeyActionParam {
    permission: Permission;
    key: string;
}
interface ActionData {
    account: NameType;
    parent: NameType;
    permission: NameType;
    auth: Authority;
    authorized_by: NameType;
}
type PermissionType = Permission | API.v1.AccountPermission | {
    perm_name: NameType;
    parent: NameType;
    required_auth: AuthorityType;
    linked_actions?: LinkedActionType[];
};
type LinkedActionType = LinkedAction | {
    account: NameType;
    action: NameType;
};
declare class LinkedAction extends Struct {
    account: Name;
    action: Name;
}
type WaitWeightType = WaitWeight | {
    wait_sec: UInt32Type;
    weight: UInt16Type;
};
declare class Permission extends Struct {
    perm_name: Name;
    parent: Name;
    required_auth: Authority;
    linked_actions?: LinkedAction;
    static from(value: PermissionType): Permission;
    get name(): Name;
    addKey(key: PublicKeyType, weight?: number): void;
    removeKey(key: PublicKeyType): void;
    addAccount(permissionLevel: PermissionLevelType | string, weight?: number): void;
    removeAccount(permissionLevel: PermissionLevelType): void;
    addWait(wait: WaitWeightType): void;
    removeWait(wait: WaitWeightType): void;
}

declare const abiBlob: Blob;
declare const abi: ABI;
declare class Contract extends Contract$1 {
    constructor(args: PartialBy<ContractArgs, 'abi' | 'account'>);
    action<T extends 'activate' | 'bidname' | 'bidrefund' | 'buyram' | 'buyrambytes' | 'buyrex' | 'canceldelay' | 'cfgpowerup' | 'claimrewards' | 'closerex' | 'cnclrexorder' | 'consolidate' | 'defcpuloan' | 'defnetloan' | 'delegatebw' | 'deleteauth' | 'deposit' | 'fundcpuloan' | 'fundnetloan' | 'init' | 'limitauthchg' | 'linkauth' | 'mvfrsavings' | 'mvtosavings' | 'newaccount' | 'onblock' | 'onerror' | 'powerup' | 'powerupexec' | 'refund' | 'regproducer' | 'regproducer2' | 'regproxy' | 'rentcpu' | 'rentnet' | 'rexexec' | 'rmvproducer' | 'sellram' | 'sellrex' | 'setabi' | 'setacctcpu' | 'setacctnet' | 'setacctram' | 'setalimits' | 'setcode' | 'setinflation' | 'setparams' | 'setpriv' | 'setram' | 'setramrate' | 'setrex' | 'undelegatebw' | 'unlinkauth' | 'unregprod' | 'unstaketorex' | 'updateauth' | 'updaterex' | 'updtrevision' | 'voteproducer' | 'voteupdate' | 'wasmcfg' | 'withdraw'>(name: T, data: ActionNameParams[T], options?: ActionOptions): Action;
    table<T extends 'abihash' | 'bidrefunds' | 'blockinfo' | 'cpuloan' | 'delband' | 'global' | 'global2' | 'global3' | 'global4' | 'namebids' | 'netloan' | 'powup.order' | 'powup.state' | 'producers' | 'producers2' | 'rammarket' | 'refunds' | 'retbuckets' | 'rexbal' | 'rexfund' | 'rexpool' | 'rexqueue' | 'rexretpool' | 'userres' | 'voters' | 'limitauthchg'>(name: T, scope?: NameType): _wharfkit_contract.Table<any>;
}
interface ActionNameParams {
    activate: ActionParams.Activate;
    bidname: ActionParams.Bidname;
    bidrefund: ActionParams.Bidrefund;
    buyram: ActionParams.Buyram;
    buyrambytes: ActionParams.Buyrambytes;
    buyrex: ActionParams.Buyrex;
    canceldelay: ActionParams.Canceldelay;
    cfgpowerup: ActionParams.Cfgpowerup;
    claimrewards: ActionParams.Claimrewards;
    closerex: ActionParams.Closerex;
    cnclrexorder: ActionParams.Cnclrexorder;
    consolidate: ActionParams.Consolidate;
    defcpuloan: ActionParams.Defcpuloan;
    defnetloan: ActionParams.Defnetloan;
    delegatebw: ActionParams.Delegatebw;
    deleteauth: ActionParams.Deleteauth;
    deposit: ActionParams.Deposit;
    fundcpuloan: ActionParams.Fundcpuloan;
    fundnetloan: ActionParams.Fundnetloan;
    init: ActionParams.Init;
    limitauthchg: ActionParams.Limitauthchg;
    linkauth: ActionParams.Linkauth;
    mvfrsavings: ActionParams.Mvfrsavings;
    mvtosavings: ActionParams.Mvtosavings;
    newaccount: ActionParams.Newaccount;
    onblock: ActionParams.Onblock;
    onerror: ActionParams.Onerror;
    powerup: ActionParams.Powerup;
    powerupexec: ActionParams.Powerupexec;
    refund: ActionParams.Refund;
    regproducer: ActionParams.Regproducer;
    regproducer2: ActionParams.Regproducer2;
    regproxy: ActionParams.Regproxy;
    rentcpu: ActionParams.Rentcpu;
    rentnet: ActionParams.Rentnet;
    rexexec: ActionParams.Rexexec;
    rmvproducer: ActionParams.Rmvproducer;
    sellram: ActionParams.Sellram;
    sellrex: ActionParams.Sellrex;
    setabi: ActionParams.Setabi;
    setacctcpu: ActionParams.Setacctcpu;
    setacctnet: ActionParams.Setacctnet;
    setacctram: ActionParams.Setacctram;
    setalimits: ActionParams.Setalimits;
    setcode: ActionParams.Setcode;
    setinflation: ActionParams.Setinflation;
    setparams: ActionParams.Setparams;
    setpriv: ActionParams.Setpriv;
    setram: ActionParams.Setram;
    setramrate: ActionParams.Setramrate;
    setrex: ActionParams.Setrex;
    undelegatebw: ActionParams.Undelegatebw;
    unlinkauth: ActionParams.Unlinkauth;
    unregprod: ActionParams.Unregprod;
    unstaketorex: ActionParams.Unstaketorex;
    updateauth: ActionParams.Updateauth;
    updaterex: ActionParams.Updaterex;
    updtrevision: ActionParams.Updtrevision;
    voteproducer: ActionParams.Voteproducer;
    voteupdate: ActionParams.Voteupdate;
    wasmcfg: ActionParams.Wasmcfg;
    withdraw: ActionParams.Withdraw;
}
declare namespace ActionParams {
    interface Activate {
        feature_digest: Checksum256Type;
    }
    interface Bidname {
        bidder: NameType;
        newname: NameType;
        bid: AssetType;
    }
    interface Bidrefund {
        bidder: NameType;
        newname: NameType;
    }
    interface Buyram {
        payer: NameType;
        receiver: NameType;
        quant: AssetType;
    }
    interface Buyrambytes {
        payer: NameType;
        receiver: NameType;
        bytes: UInt32Type;
    }
    interface Buyrex {
        from: NameType;
        amount: AssetType;
    }
    interface Canceldelay {
        canceling_auth: Types.PermissionLevel;
        trx_id: Checksum256Type;
    }
    interface Cfgpowerup {
        args: Types.PowerupConfig;
    }
    interface Claimrewards {
        owner: NameType;
    }
    interface Closerex {
        owner: NameType;
    }
    interface Cnclrexorder {
        owner: NameType;
    }
    interface Consolidate {
        owner: NameType;
    }
    interface Defcpuloan {
        from: NameType;
        loan_num: UInt64Type;
        amount: AssetType;
    }
    interface Defnetloan {
        from: NameType;
        loan_num: UInt64Type;
        amount: AssetType;
    }
    interface Delegatebw {
        from: NameType;
        receiver: NameType;
        stake_net_quantity: AssetType;
        stake_cpu_quantity: AssetType;
        transfer: boolean;
    }
    interface Deleteauth {
        account: NameType;
        permission: NameType;
        authorized_by?: NameType;
    }
    interface Deposit {
        owner: NameType;
        amount: AssetType;
    }
    interface Fundcpuloan {
        from: NameType;
        loan_num: UInt64Type;
        payment: AssetType;
    }
    interface Fundnetloan {
        from: NameType;
        loan_num: UInt64Type;
        payment: AssetType;
    }
    interface Init {
        version: VarUIntType;
        core: Asset.SymbolType;
    }
    interface Limitauthchg {
        account: NameType;
        allow_perms: NameType[];
        disallow_perms: NameType[];
    }
    interface Linkauth {
        account: NameType;
        code: NameType;
        type: NameType;
        requirement: NameType;
        authorized_by?: NameType;
    }
    interface Mvfrsavings {
        owner: NameType;
        rex: AssetType;
    }
    interface Mvtosavings {
        owner: NameType;
        rex: AssetType;
    }
    interface Newaccount {
        creator: NameType;
        name: NameType;
        owner: Types.Authority;
        active: Types.Authority;
    }
    interface Onblock {
        header: Types.BlockHeader;
    }
    interface Onerror {
        sender_id: UInt128Type;
        sent_trx: BytesType;
    }
    interface Powerup {
        payer: NameType;
        receiver: NameType;
        days: UInt32Type;
        net_frac: Int64Type;
        cpu_frac: Int64Type;
        max_payment: AssetType;
    }
    interface Powerupexec {
        user: NameType;
        max: UInt16Type;
    }
    interface Refund {
        owner: NameType;
    }
    interface Regproducer {
        producer: NameType;
        producer_key: PublicKeyType;
        url: string;
        location: UInt16Type;
    }
    interface Regproducer2 {
        producer: NameType;
        producer_authority: Types.BlockSigningAuthorityV0;
        url: string;
        location: UInt16Type;
    }
    interface Regproxy {
        proxy: NameType;
        isproxy: boolean;
    }
    interface Rentcpu {
        from: NameType;
        receiver: NameType;
        loan_payment: AssetType;
        loan_fund: AssetType;
    }
    interface Rentnet {
        from: NameType;
        receiver: NameType;
        loan_payment: AssetType;
        loan_fund: AssetType;
    }
    interface Rexexec {
        user: NameType;
        max: UInt16Type;
    }
    interface Rmvproducer {
        producer: NameType;
    }
    interface Sellram {
        account: NameType;
        bytes: Int64Type;
    }
    interface Sellrex {
        from: NameType;
        rex: AssetType;
    }
    interface Setabi {
        account: NameType;
        abi: BytesType;
        memo?: string;
    }
    interface Setacctcpu {
        account: NameType;
        cpu_weight?: Int64Type;
    }
    interface Setacctnet {
        account: NameType;
        net_weight?: Int64Type;
    }
    interface Setacctram {
        account: NameType;
        ram_bytes?: Int64Type;
    }
    interface Setalimits {
        account: NameType;
        ram_bytes: Int64Type;
        net_weight: Int64Type;
        cpu_weight: Int64Type;
    }
    interface Setcode {
        account: NameType;
        vmtype: UInt8Type;
        vmversion: UInt8Type;
        code: BytesType;
        memo?: string;
    }
    interface Setinflation {
        annual_rate: Int64Type;
        inflation_pay_factor: Int64Type;
        votepay_factor: Int64Type;
    }
    interface Setparams {
        params: Types.BlockchainParametersV1;
    }
    interface Setpriv {
        account: NameType;
        is_priv: UInt8Type;
    }
    interface Setram {
        max_ram_size: UInt64Type;
    }
    interface Setramrate {
        bytes_per_block: UInt16Type;
    }
    interface Setrex {
        balance: AssetType;
    }
    interface Undelegatebw {
        from: NameType;
        receiver: NameType;
        unstake_net_quantity: AssetType;
        unstake_cpu_quantity: AssetType;
    }
    interface Unlinkauth {
        account: NameType;
        code: NameType;
        type: NameType;
        authorized_by?: NameType;
    }
    interface Unregprod {
        producer: NameType;
    }
    interface Unstaketorex {
        owner: NameType;
        receiver: NameType;
        from_net: AssetType;
        from_cpu: AssetType;
    }
    interface Updateauth {
        account: NameType;
        permission: NameType;
        parent: NameType;
        auth: Types.Authority;
        authorized_by?: NameType;
    }
    interface Updaterex {
        owner: NameType;
    }
    interface Updtrevision {
        revision: UInt8Type;
    }
    interface Voteproducer {
        voter: NameType;
        proxy: NameType;
        producers: NameType[];
    }
    interface Voteupdate {
        voter_name: NameType;
    }
    interface Wasmcfg {
        settings: NameType;
    }
    interface Withdraw {
        owner: NameType;
        amount: AssetType;
    }
}
declare namespace Types {
    class AbiHash extends Struct {
        owner: Name;
        hash: Checksum256;
    }
    class Activate extends Struct {
        feature_digest: Checksum256;
    }
    class KeyWeight extends Struct {
        key: PublicKey;
        weight: UInt16;
    }
    class PermissionLevel extends Struct {
        actor: Name;
        permission: Name;
    }
    class PermissionLevelWeight extends Struct {
        permission: PermissionLevel;
        weight: UInt16;
    }
    class WaitWeight extends Struct {
        wait_sec: UInt32;
        weight: UInt16;
    }
    class Authority extends Struct {
        threshold: UInt32;
        keys: KeyWeight[];
        accounts: PermissionLevelWeight[];
        waits: WaitWeight[];
    }
    class BidRefund extends Struct {
        bidder: Name;
        amount: Asset;
    }
    class Bidname extends Struct {
        bidder: Name;
        newname: Name;
        bid: Asset;
    }
    class Bidrefund extends Struct {
        bidder: Name;
        newname: Name;
    }
    class ProducerKey extends Struct {
        producer_name: Name;
        block_signing_key: PublicKey;
    }
    class ProducerSchedule extends Struct {
        version: UInt32;
        producers: ProducerKey[];
    }
    class BlockHeader extends Struct {
        timestamp: UInt32;
        producer: Name;
        confirmed: UInt16;
        previous: Checksum256;
        transaction_mroot: Checksum256;
        action_mroot: Checksum256;
        schedule_version: UInt32;
        new_producers?: ProducerSchedule;
    }
    class BlockInfoRecord extends Struct {
        version: UInt8;
        block_height: UInt32;
        block_timestamp: TimePoint;
    }
    class BlockSigningAuthorityV0 extends Struct {
        threshold: UInt32;
        keys: KeyWeight[];
    }
    class BlockchainParameters extends Struct {
        max_block_net_usage: UInt64;
        target_block_net_usage_pct: UInt32;
        max_transaction_net_usage: UInt32;
        base_per_transaction_net_usage: UInt32;
        net_usage_leeway: UInt32;
        context_free_discount_net_usage_num: UInt32;
        context_free_discount_net_usage_den: UInt32;
        max_block_cpu_usage: UInt32;
        target_block_cpu_usage_pct: UInt32;
        max_transaction_cpu_usage: UInt32;
        min_transaction_cpu_usage: UInt32;
        max_transaction_lifetime: UInt32;
        deferred_trx_expiration_window: UInt32;
        max_transaction_delay: UInt32;
        max_inline_action_size: UInt32;
        max_inline_action_depth: UInt16;
        max_authority_depth: UInt16;
    }
    class BlockchainParametersV1 extends Struct {
        max_action_return_value_size?: UInt32;
    }
    class Buyram extends Struct {
        payer: Name;
        receiver: Name;
        quant: Asset;
    }
    class Buyrambytes extends Struct {
        payer: Name;
        receiver: Name;
        bytes: UInt32;
    }
    class Buyrex extends Struct {
        from: Name;
        amount: Asset;
    }
    class Canceldelay extends Struct {
        canceling_auth: PermissionLevel;
        trx_id: Checksum256;
    }
    class PowerupConfigResource extends Struct {
        current_weight_ratio?: Int64;
        target_weight_ratio?: Int64;
        assumed_stake_weight?: Int64;
        target_timestamp?: TimePointSec;
        exponent?: Float64;
        decay_secs?: UInt32;
        min_price?: Asset;
        max_price?: Asset;
    }
    class PowerupConfig extends Struct {
        net: PowerupConfigResource;
        cpu: PowerupConfigResource;
        powerup_days?: UInt32;
        min_powerup_fee?: Asset;
    }
    class Cfgpowerup extends Struct {
        args: PowerupConfig;
    }
    class Claimrewards extends Struct {
        owner: Name;
    }
    class Closerex extends Struct {
        owner: Name;
    }
    class Cnclrexorder extends Struct {
        owner: Name;
    }
    class Connector extends Struct {
        balance: Asset;
        weight: Float64;
    }
    class Consolidate extends Struct {
        owner: Name;
    }
    class Defcpuloan extends Struct {
        from: Name;
        loan_num: UInt64;
        amount: Asset;
    }
    class Defnetloan extends Struct {
        from: Name;
        loan_num: UInt64;
        amount: Asset;
    }
    class Delegatebw extends Struct {
        from: Name;
        receiver: Name;
        stake_net_quantity: Asset;
        stake_cpu_quantity: Asset;
        transfer: boolean;
    }
    class DelegatedBandwidth extends Struct {
        from: Name;
        to: Name;
        net_weight: Asset;
        cpu_weight: Asset;
    }
    class Deleteauth extends Struct {
        account: Name;
        permission: Name;
        authorized_by?: Name;
    }
    class Deposit extends Struct {
        owner: Name;
        amount: Asset;
    }
    class EosioGlobalState extends Struct {
        max_ram_size: UInt64;
        total_ram_bytes_reserved: UInt64;
        total_ram_stake: Int64;
        last_producer_schedule_update: BlockTimestamp;
        last_pervote_bucket_fill: TimePoint;
        pervote_bucket: Int64;
        perblock_bucket: Int64;
        total_unpaid_blocks: UInt32;
        total_activated_stake: Int64;
        thresh_activated_stake_time: TimePoint;
        last_producer_schedule_size: UInt16;
        total_producer_vote_weight: Float64;
        last_name_close: BlockTimestamp;
    }
    class EosioGlobalState2 extends Struct {
        new_ram_per_block: UInt16;
        last_ram_increase: BlockTimestamp;
        last_block_num: BlockTimestamp;
        total_producer_votepay_share: Float64;
        revision: UInt8;
    }
    class EosioGlobalState3 extends Struct {
        last_vpay_state_update: TimePoint;
        total_vpay_share_change_rate: Float64;
    }
    class EosioGlobalState4 extends Struct {
        continuous_rate: Float64;
        inflation_pay_factor: Int64;
        votepay_factor: Int64;
    }
    class ExchangeState extends Struct {
        supply: Asset;
        base: Connector;
        quote: Connector;
    }
    class Fundcpuloan extends Struct {
        from: Name;
        loan_num: UInt64;
        payment: Asset;
    }
    class Fundnetloan extends Struct {
        from: Name;
        loan_num: UInt64;
        payment: Asset;
    }
    class Init extends Struct {
        version: VarUInt;
        core: Asset.Symbol;
    }
    class Limitauthchg extends Struct {
        account: Name;
        allow_perms: Name[];
        disallow_perms: Name[];
    }
    class Linkauth extends Struct {
        account: Name;
        code: Name;
        type: Name;
        requirement: Name;
        authorized_by?: Name;
    }
    class Mvfrsavings extends Struct {
        owner: Name;
        rex: Asset;
    }
    class Mvtosavings extends Struct {
        owner: Name;
        rex: Asset;
    }
    class NameBid extends Struct {
        newname: Name;
        high_bidder: Name;
        high_bid: Int64;
        last_bid_time: TimePoint;
    }
    class Newaccount extends Struct {
        creator: Name;
        name: Name;
        owner: Authority;
        active: Authority;
    }
    class Onblock extends Struct {
        header: BlockHeader;
    }
    class Onerror extends Struct {
        sender_id: UInt128;
        sent_trx: Bytes;
    }
    class PairTimePointSecInt64 extends Struct {
        first: TimePointSec;
        second: Int64;
    }
    class Powerup extends Struct {
        payer: Name;
        receiver: Name;
        days: UInt32;
        net_frac: Int64;
        cpu_frac: Int64;
        max_payment: Asset;
    }
    class PowerupOrder extends Struct {
        version: UInt8;
        id: UInt64;
        owner: Name;
        net_weight: Int64;
        cpu_weight: Int64;
        expires: TimePointSec;
    }
    class PowerupStateResource extends Struct {
        version: UInt8;
        weight: Int64;
        weight_ratio: Int64;
        assumed_stake_weight: Int64;
        initial_weight_ratio: Int64;
        target_weight_ratio: Int64;
        initial_timestamp: TimePointSec;
        target_timestamp: TimePointSec;
        exponent: Float64;
        decay_secs: UInt32;
        min_price: Asset;
        max_price: Asset;
        utilization: Int64;
        adjusted_utilization: Int64;
        utilization_timestamp: TimePointSec;
    }
    class PowerupState extends Struct {
        version: UInt8;
        net: PowerupStateResource;
        cpu: PowerupStateResource;
        powerup_days: UInt32;
        min_powerup_fee: Asset;
    }
    class Powerupexec extends Struct {
        user: Name;
        max: UInt16;
    }
    class ProducerInfo extends Struct {
        owner: Name;
        total_votes: Float64;
        producer_key: PublicKey;
        is_active: boolean;
        url: string;
        unpaid_blocks: UInt32;
        last_claim_time: TimePoint;
        location: UInt16;
        producer_authority?: BlockSigningAuthorityV0;
    }
    class ProducerInfo2 extends Struct {
        owner: Name;
        votepay_share: Float64;
        last_votepay_share_update: TimePoint;
    }
    class Refund extends Struct {
        owner: Name;
    }
    class RefundRequest extends Struct {
        owner: Name;
        request_time: TimePointSec;
        net_amount: Asset;
        cpu_amount: Asset;
    }
    class Regproducer extends Struct {
        producer: Name;
        producer_key: PublicKey;
        url: string;
        location: UInt16;
    }
    class Regproducer2 extends Struct {
        producer: Name;
        producer_authority: BlockSigningAuthorityV0;
        url: string;
        location: UInt16;
    }
    class Regproxy extends Struct {
        proxy: Name;
        isproxy: boolean;
    }
    class Rentcpu extends Struct {
        from: Name;
        receiver: Name;
        loan_payment: Asset;
        loan_fund: Asset;
    }
    class Rentnet extends Struct {
        from: Name;
        receiver: Name;
        loan_payment: Asset;
        loan_fund: Asset;
    }
    class RexBalance extends Struct {
        version: UInt8;
        owner: Name;
        vote_stake: Asset;
        rex_balance: Asset;
        matured_rex: Int64;
        rex_maturities: PairTimePointSecInt64[];
    }
    class RexFund extends Struct {
        version: UInt8;
        owner: Name;
        balance: Asset;
    }
    class RexLoan extends Struct {
        version: UInt8;
        from: Name;
        receiver: Name;
        payment: Asset;
        balance: Asset;
        total_staked: Asset;
        loan_num: UInt64;
        expiration: TimePoint;
    }
    class RexOrder extends Struct {
        version: UInt8;
        owner: Name;
        rex_requested: Asset;
        proceeds: Asset;
        stake_change: Asset;
        order_time: TimePoint;
        is_open: boolean;
    }
    class RexPool extends Struct {
        version: UInt8;
        total_lent: Asset;
        total_unlent: Asset;
        total_rent: Asset;
        total_lendable: Asset;
        total_rex: Asset;
        namebid_proceeds: Asset;
        loan_num: UInt64;
    }
    class RexReturnBuckets extends Struct {
        version: UInt8;
        return_buckets: PairTimePointSecInt64[];
    }
    class RexReturnPool extends Struct {
        version: UInt8;
        last_dist_time: TimePointSec;
        pending_bucket_time: TimePointSec;
        oldest_bucket_time: TimePointSec;
        pending_bucket_proceeds: Int64;
        current_rate_of_increase: Int64;
        proceeds: Int64;
    }
    class Rexexec extends Struct {
        user: Name;
        max: UInt16;
    }
    class Rmvproducer extends Struct {
        producer: Name;
    }
    class Sellram extends Struct {
        account: Name;
        bytes: Int64;
    }
    class Sellrex extends Struct {
        from: Name;
        rex: Asset;
    }
    class Setabi extends Struct {
        account: Name;
        abi: Bytes;
        memo?: string;
    }
    class Setacctcpu extends Struct {
        account: Name;
        cpu_weight?: Int64;
    }
    class Setacctnet extends Struct {
        account: Name;
        net_weight?: Int64;
    }
    class Setacctram extends Struct {
        account: Name;
        ram_bytes?: Int64;
    }
    class Setalimits extends Struct {
        account: Name;
        ram_bytes: Int64;
        net_weight: Int64;
        cpu_weight: Int64;
    }
    class Setcode extends Struct {
        account: Name;
        vmtype: UInt8;
        vmversion: UInt8;
        code: Bytes;
        memo?: string;
    }
    class Setinflation extends Struct {
        annual_rate: Int64;
        inflation_pay_factor: Int64;
        votepay_factor: Int64;
    }
    class Setparams extends Struct {
        params: BlockchainParametersV1;
    }
    class Setpriv extends Struct {
        account: Name;
        is_priv: UInt8;
    }
    class Setram extends Struct {
        max_ram_size: UInt64;
    }
    class Setramrate extends Struct {
        bytes_per_block: UInt16;
    }
    class Setrex extends Struct {
        balance: Asset;
    }
    class Undelegatebw extends Struct {
        from: Name;
        receiver: Name;
        unstake_net_quantity: Asset;
        unstake_cpu_quantity: Asset;
    }
    class Unlinkauth extends Struct {
        account: Name;
        code: Name;
        type: Name;
        authorized_by?: Name;
    }
    class Unregprod extends Struct {
        producer: Name;
    }
    class Unstaketorex extends Struct {
        owner: Name;
        receiver: Name;
        from_net: Asset;
        from_cpu: Asset;
    }
    class Updateauth extends Struct {
        account: Name;
        permission: Name;
        parent: Name;
        auth: Authority;
        authorized_by?: Name;
    }
    class Updaterex extends Struct {
        owner: Name;
    }
    class Updtrevision extends Struct {
        revision: UInt8;
    }
    class UserResources extends Struct {
        owner: Name;
        net_weight: Asset;
        cpu_weight: Asset;
        ram_bytes: Int64;
    }
    class Voteproducer extends Struct {
        voter: Name;
        proxy: Name;
        producers: Name[];
    }
    class VoterInfo extends Struct {
        owner: Name;
        proxy: Name;
        producers: Name[];
        staked: Int64;
        last_vote_weight: Float64;
        proxied_vote_weight: Float64;
        is_proxy: boolean;
        flags1: UInt32;
        reserved2: UInt32;
        reserved3: Asset;
    }
    class Voteupdate extends Struct {
        voter_name: Name;
    }
    class Wasmcfg extends Struct {
        settings: Name;
    }
    class Withdraw extends Struct {
        owner: Name;
        amount: Asset;
    }
    class LimitAuthChange extends Struct {
        version: UInt8;
        account: Name;
        allow_perms: Name[];
        disallow_perms: Name[];
    }
}

type eosio_ActionNameParams = ActionNameParams;
declare const eosio_ActionParams: typeof ActionParams;
type eosio_Contract = Contract;
declare const eosio_Contract: typeof Contract;
declare const eosio_Types: typeof Types;
declare const eosio_abi: typeof abi;
declare const eosio_abiBlob: typeof abiBlob;
declare namespace eosio {
  export {
    eosio_ActionNameParams as ActionNameParams,
    eosio_ActionParams as ActionParams,
    eosio_Contract as Contract,
    eosio_Types as Types,
    eosio_abi as abi,
    eosio_abiBlob as abiBlob,
  };
}

type ResourceType = 'cpu' | 'net' | 'ram';
declare class Resource {
    resource: ResourceType;
    data: API.v1.AccountObject;
    readonly available: Int64;
    readonly used: Int64;
    readonly max: Int64;
    readonly weight?: Int64;
    constructor(resource: ResourceType, data: API.v1.AccountObject);
}

interface AccountArgs<Data extends API.v1.AccountObject = API.v1.AccountObject> {
    client: APIClient;
    contract?: Contract$1;
    data: Data;
}
interface BuyramOptions {
    receiver?: NameType;
}
interface DelegateOptions {
    from?: NameType;
    receiver?: NameType;
    cpu?: AssetType;
    net?: AssetType;
    transfer?: boolean;
}
interface UndelegateOptions {
    from?: NameType;
    receiver?: NameType;
    cpu?: AssetType;
    net?: AssetType;
}
declare class Account<Data extends API.v1.AccountObject = API.v1.AccountObject> {
    readonly data: Data;
    readonly systemContract: Contract;
    readonly client: APIClient;
    readonly token: Token;
    constructor(args: AccountArgs<Data>);
    get accountName(): Name;
    get systemToken(): Asset.Symbol;
    balance(symbol?: Asset.SymbolType, tokenContract?: NameType): Promise<Asset>;
    permission(permissionName: NameType): Permission;
    resource(resourceType: ResourceType): Resource;
    resources(sampleAccount?: NameType): Resources;
    setPermission(permission: Permission): Action;
    removePermission(permissionName: NameType): Action;
    linkauth(contract: NameType, action: NameType, requiredPermission: NameType): Action;
    unlinkauth(contract: NameType, action: NameType): Action;
    buyRam(amount: AssetType, options?: BuyramOptions): Action;
    buyRamBytes(bytes: UInt32Type, options?: BuyramOptions): Action;
    sellRam(bytes: UInt32Type): Action;
    delegate(value: DelegateOptions): Action;
    undelegate(value: UndelegateOptions): Action;
}

interface AccountKitOptions {
    contract?: Contract$1;
    client?: APIClient;
}
declare class AccountKit<DataType extends API.v1.AccountObject = API.v1.AccountObject> {
    readonly chain: ChainDefinition<DataType>;
    readonly client: APIClient;
    readonly contract?: Contract$1;
    constructor(chain: ChainDefinition<DataType>, options?: AccountKitOptions);
    load(accountName: NameType): Promise<Account<DataType>>;
}

export { Account, AccountArgs, AccountKit, ActionData, AddKeyActionParam, BuyramOptions, DelegateOptions, LinkedAction, LinkedActionType, Permission, PermissionData, PermissionType, eosio as SystemContract, UndelegateOptions, WaitWeightType };
